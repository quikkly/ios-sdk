// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Quikkly
import AVFoundation
import CoreImage
import Foundation
@_exported import Quikkly
import Swift
import UIKit
import WebKit
@objc(QKScanViewDelegate) public protocol ScanViewDelegate : AnyObject {
  @objc optional func scanView(_ scanView: Quikkly.ScanView, didDetectScannables scannables: [Quikkly.Scannable])
  @objc optional func scanViewDidRequestCamera(status: AVFoundation.AVAuthorizationStatus) -> Swift.Bool
}
@objc(QKScanView) public class ScanView : UIKit.UIView {
  public var zoom: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  @objc weak public var delegate: Quikkly.ScanViewDelegate?
  @objc override dynamic public var frame: CoreGraphics.CGRect {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func start()
  @objc public func stop()
  @IBAction @objc public func permissionsDeniedButtonPressed()
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc(QKScannableSkin) public class ScannableSkin : ObjectiveC.NSObject {
  @objc(QKScannableSkinImageFit) public enum ImageFit : Swift.Int32 {
    case templateDefault = 0
    case stretch = 1
    case meet = 2
    case slice = 3
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @objc public var backgroundColor: Swift.String?
  @objc public var borderColor: Swift.String?
  @objc public var dataColors: [Swift.String]?
  @objc public var maskColor: Swift.String?
  @objc public var overlayColor: Swift.String?
  @objc public var imageUri: Swift.String?
  @objc public var imageFit: Quikkly.ScannableSkin.ImageFit
  @objc public var logoUri: Swift.String?
  @objc public var logoFit: Quikkly.ScannableSkin.ImageFit
  @objc public var joinOptions: Quikkly.QKScannableSkinJoinOption
  @objc override dynamic public init()
  @objc deinit
}
@objc(QKQuikkly) public class Quikkly : ObjectiveC.NSObject {
  @objc public static var apiKey: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc public static var blueprintFilename: Swift.String?
  @objc public static var user: Quikkly.Quikkly.User?
  @objc(QKUser) public class User : ObjectiveC.NSObject {
    @objc public var dob: Swift.String?
    @objc public var gender: Swift.String?
    @objc public var identifier: Swift.Int
    @objc public init(withId identifier: Swift.Int, gender: Swift.String?, dob: Swift.String?)
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(QKScannableViewDelegate) public protocol ScannableViewDelegate : AnyObject {
  @objc optional func scannableViewWillStartLoading(_ scannableView: Quikkly.ScannableView)
  @objc optional func scannableView(_ scannableView: Quikkly.ScannableView, didFinishLoading success: Swift.Bool)
}
@objc(QKScannableView) public class ScannableView : UIKit.UIView, WebKit.WKNavigationDelegate, UIKit.UIWebViewDelegate {
  @objc weak public var delegate: Quikkly.ScannableViewDelegate?
  @objc public var scannable: Quikkly.Scannable? {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc public convenience init(withScannable scannable: Quikkly.Scannable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func reload()
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func webViewDidFinishLoad(_ webView: UIKit.UIWebView)
  @objc public func webView(_ webView: UIKit.UIWebView, didFailLoadWithError error: Swift.Error)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public struct UIImageColors {
  public var backgroundColor: UIKit.UIColor!
  public var primaryColor: UIKit.UIColor!
  public var secondaryColor: UIKit.UIColor!
  public var detailColor: UIKit.UIColor!
}
extension UIImage {
  public func getColors(scaleDownSize: CoreGraphics.CGSize = CGSize.zero, completionHandler: @escaping (Quikkly.UIImageColors) -> Swift.Void)
  public func getColors(scaleDownSize: CoreGraphics.CGSize = CGSize.zero) -> Quikkly.UIImageColors
}
@objc(QKScannableResult) public enum ScannablePipelineResult : Swift.Int {
  case unknown = 0
  case noFrameScanned = 10
  case noShapesFound = 100
  case shapeFound = 200
  case dotsFound = 300
  case success = 10000
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(QKScannablePipelineDelegate) public protocol ScannablePipelineDelegate : AnyObject {
  @objc func pipelineDidProcessImage(_ image: CoreGraphics.CGImage, result: Quikkly.ScannablePipelineResult, scannables: [Quikkly.Scannable])
}
@objc(QKScannablePipeline) public class ScannablePipeline : ObjectiveC.NSObject {
  @objc weak public var delegate: Quikkly.ScannablePipelineDelegate?
  public class func process(_ image: CoreGraphics.CGImage) -> (Quikkly.ScannablePipelineResult, [Quikkly.Scannable])
  @objc override dynamic public convenience init()
  @objc public init(workQueue: Dispatch.DispatchQueue?, mainQueue: Dispatch.DispatchQueue = DispatchQueue.main)
  @objc public func push(image: CoreGraphics.CGImage)
  @objc public func clear()
  @objc deinit
}
@objc open class ScanViewController : UIKit.UIViewController, Quikkly.ScanViewDelegate {
  open var zoom: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc dynamic public init()
  @objc required dynamic public convenience init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc @IBAction public func showActivityIndicator()
  @objc @IBAction public func hideActivityIndicator()
  @objc open func scanViewDidRequestCamera(status: AVFoundation.AVAuthorizationStatus) -> Swift.Bool
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc(QKScannable) public class Scannable : ObjectiveC.NSObject {
  @objc public var value: Swift.UInt64 {
    get
    }
  @objc public var template: Swift.String
  @objc public var skin: Quikkly.ScannableSkin
  @objc public var corners: [CoreGraphics.CGPoint] {
    get
    }
  @objc public var svgString: Swift.String? {
    @objc get
  }
  @objc public func getMappedData(_ completion: @escaping ([Swift.String : Any]?) -> Swift.Void)
  @objc public class func detect(inImage image: CoreGraphics.CGImage, completion: @escaping ([Quikkly.Scannable]) -> Swift.Void)
  @objc public class func detect(inImage image: CoreGraphics.CGImage) -> [Quikkly.Scannable]
  @objc public convenience init(withMappedData mappedData: [Swift.String : Any], template: Swift.String?, skin: Quikkly.ScannableSkin?, completion: @escaping (Swift.Bool, Quikkly.Scannable) -> Swift.Void)
  @objc public convenience init(withValue value: Swift.UInt64, template: Swift.String?, skin: Quikkly.ScannableSkin)
  @objc deinit
}
